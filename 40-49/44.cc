// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal 
// numbers are:
// 
// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
// 
// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 
// 70 − 22 = 48, is not pentagonal.
// 
// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference 
// are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?


// 24*n+1 is a perfect square if n is pentagonal
// the perfect squares used are 5, 11, 17, 23... going by sixes.

#include <iostream>
#include <chrono>
#include <set>

using namespace std;

unsigned long long pent(unsigned long long n) {
    return n * (3 * n - 1) / 2;
}

bool in_set(set<unsigned long long> &s, unsigned long long n) {
    set<unsigned long long>::iterator it;
    it = s.find(n);
    if(it == s.end())
        return false;
    return true;
}

int main () {
    using namespace std::chrono;
    system_clock::time_point start = system_clock::now();

    cout << "creating squares...";
    set<unsigned long long> squares;
    for(unsigned long long n = 5; n < 10000000; n+= 6)
        squares.insert(n*n);
    cout << "done!" << endl;

    for(unsigned long long diff = 1; diff < 10000; diff++) {
        for(unsigned long long ii = 1; ii < 10000; ii++) {
            unsigned long long a = pent(ii);
            unsigned long long b = pent(ii+diff);
            unsigned long long sum = a + b;
            unsigned long long diff = b - a;
            if(in_set(squares, sum*24+1) && in_set(squares, diff*24+1))
                cout << ii << " " << ii+diff << endl;
        }
    }

    
    

    system_clock::time_point stop = system_clock::now();
    duration<double> elapsed = duration_cast<duration<double>>(stop - start);
    cout << "Elapsed time: " << elapsed.count() << " seconds" << endl;
    return 0;
}
