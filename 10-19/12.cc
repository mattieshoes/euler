// The sequence of triangle numbers is generated by adding the natural numbers. 
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
// The first ten terms would be:
// 
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// 
// Let us list the factors of the first seven triangle numbers:
// 
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

// NOTE:  since triangle numbers use n(n+1)/2, no perfect squares?
// TODO: make a less naive version... Maybe totients
#include <iostream>
#include <chrono>

using namespace std;

int main () {
    using namespace std::chrono;
    system_clock::time_point start = system_clock::now();

    for(unsigned long long n = 1; ; n++) {
        unsigned long long triangle_number = n * (n+1) / 2;
        unsigned long long top = triangle_number / 2;
        int count = 2;
        for(unsigned long long div = 2; div < top; div++) {
            if(triangle_number % div == 0) {
                count += 2;
                top = triangle_number / div;
            }
        }
        if(count > 500) {
            cout << triangle_number << endl;
            break;
        }
    }
    

    system_clock::time_point stop = system_clock::now();
    duration<double> elapsed = duration_cast<duration<double>>(stop - start);
    cout << "Elapsed time: " << elapsed.count() << " seconds" << endl;
    return 0;
}
